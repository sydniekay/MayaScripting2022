// Create a function that generates geometry for a spiral staircase based on user input (arguments).

/* Number of stairs to be created
* Stair depth --> int $stairDepth
* Stair width --> int $stairWidth
* Stair height --> int $stairHeight
* Initial step --> int $step
* Stair amount --> int $stepAmount
* Stair pivot point or offset --> use xform
* Step height --> $riser
* Step rotation --> $rotation
*/

// Step 1: Create the stair
// Step 2: Move the pivot point
// Step 3: Translate and rotate around a central point.
// Bonus: Create a center pole for the steps to "stick" to

// Create pole (cylinder) on the origin
// Radius --> $poleRadius
// Height --> $poleHeight = $stairHeight + $riser * $stairAmount
// Move --> $poleLocation = $poleHeight/2 - $stairHeight/2



proc GenerateStaircase(float $poleRadius, float $stairWidth, float $stairHeight, float $stairDepth, int $stepAmount, float $riser, float $rotation)
{
    float $poleHeight = $riser * $stepAmount;
    float $poleLocation = ($poleHeight/2) - ($stairHeight/2);
    // Create the pole
    polyCylinder 
        -radius $poleRadius 
        -height $poleHeight 
        -subdivisionsX 20 
        -subdivisionsY 1 
        -subdivisionsZ 1 
        -axis 0 1 0 
        -roundCap 0 
        -createUVs 3 
        -constructionHistory 1;
    move -relative 0 $poleLocation 0 ;

    for ($step = 0; $step < $stepAmount; $step++)
    {
        // Create the step
        polyCube 
            -width $stairWidth 
            -height $stairHeight 
            -depth $stairDepth 
            -subdivisionsX 1 
            -subdivisionsY 1 
            -subdivisionsZ 1 
            -axis 0 1 0 
            -createUVs 4 
            -constructionHistory 1 ;
        move -relative ($poleRadius + ($stairWidth/2)) 0 0 ;
        xform -worldSpace -rotatePivot 0 0 0 ;
        // Translate and rotate
        move -relative 0 ($riser * $step) 0;
        rotate -relative -objectSpace -forceOrderXYZ 0 ($rotation * $step) 0;
    }
}

GenerateStaircase(1, 6, 0.5, 1.5, 20, 0.8, 30);